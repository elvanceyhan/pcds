% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCDFunctions.r
\name{funs3}
\alias{funs3}
\alias{rank.d2e.Te}
\alias{order.d2e.Te}
\title{Two functions: rank.d2e.Te and order.d2e.Te

The ranks and orders of points in decreasing distance to the edges of the triangle

 @description rank.d2e.Te finds the ranks of the distances of points in data, Dt, to the edges of the standard equilateral triangle
 Te=T((0,0),(1,0),(1/2,sqrt(3)/2))
 dec is a logical argument, default is TRUE, so the ranks are for decreasing distances, if FALSE it will be
 in increasing distances.
 order.d2e.Te finds the orders of the distances of points in data, Dt, to the edges of Te. The arguments are
 as in rank.d2e.Te.}
\usage{
rank.d2e.Te(Dt, dec = TRUE)

order.d2e.Te(Dt, dec = TRUE)
}
\arguments{
\item{Dt}{A set of 2D points}

\item{dec}{A logical argument}
}
\value{
A list with two elements

\item{distances}{Distances from data points to the edges of Te.}
\item{dist.rank}{The ranks of the data points in decreasing distances to the edges of Te.}

x*y (prod1) or x+y (sum1).
}
\description{
Two functions: rank.d2e.Te and order.d2e.Te

The ranks and orders of points in decreasing distance to the edges of the triangle

 @description rank.d2e.Te finds the ranks of the distances of points in data, Dt, to the edges of the standard equilateral triangle
 Te=T((0,0),(1,0),(1/2,sqrt(3)/2))
 dec is a logical argument, default is TRUE, so the ranks are for decreasing distances, if FALSE it will be
 in increasing distances.
 order.d2e.Te finds the orders of the distances of points in data, Dt, to the edges of Te. The arguments are
 as in rank.d2e.Te.
}
\examples{
A<-c(1.1,1.2); B<-c(2.3,3.4); p<-c(.51,2.5)
#A<-runif(2); B<-runif(2); p<-runif(2)
#A<-runif(2,1,100); B<-runif(2,1,100); p<-runif(2,1,100);
#A<-c(1,1); B<-c(1,2) #perpendicular line is horizontal
#A<-c(1,2); B<-c(2,2) #perpendicular line is vertical
#p<-(A+B)/2

perpline(p,A,B,.45)
perpline(A,A,B,.45)

pts<-rbind(A,B,p)
xr<-range(pts)
xf<-(xr[2]-xr[1])*.25 #how far to go at the lower and upper ends in the x-coordinate
x<-seq(xr[1]-xf,xr[2]+xf,l=100)

plnAB<-perpline(p,A,B,x)
plnAB
summary(plnAB)
plot(plnAB,asp=1)

y<-plnAB$y
Xlim<-range(x,pts[,1])
if (!is.na(y[1])) {Ylim<-range(y,pts[,2])} else {Ylim<-range(pts[,2])}
xd<-Xlim[2]-Xlim[1]
yd<-Ylim[2]-Ylim[1]
pf<-c(xd,-yd)*.025

plot(A,asp=1,pch=".",xlab="",ylab="",xlim=Xlim+xd*c(-.05,.05),ylim=Ylim+yd*c(-.05,.05))
points(pts)
txt.str<-c("A","B","p")
text(pts+rbind(pf,pf,pf),txt.str)

segments(A[1],A[2],B[1],B[2],lty=2)
if (!is.na(y[1])) {lines(x,y,type="l",lty=1,xlim=Xlim,ylim=Ylim)} else {abline(v=p[1])}
tx<-p[1]+abs(xr-p[1])/2;
if (!is.na(y[1])) {ty<-perpline(p,A,B,tx)$y} else {ty=p[2]}
text(tx,ty,"line perpendicular to AB\\n and crossing p")

n<-20
#set.seed(1)
dat<-runifTe(n)$gen.points
#dat<-cbind(runif(n),runif(n))

dec.dist<-rank.d2e.Te(dat)
dec.dist
dec.dist.rank<-dec.dist[[2]] #the rank of distances to the edges in decreasing order
dec.dist.rank
dist<-dec.dist[[1]] #distances to the edges of the std eq. triangle
dist

A<-c(0,0); B<-c(1,0); C<-c(.5,sqrt(3.)/2);
Te<-rbind(A,B,C);

Xlim<-range(Te[,1])
Ylim<-range(Te[,2])
xd<-Xlim[2]-Xlim[1]
yd<-Ylim[2]-Ylim[1]

plot(A,pch=".",xlab="",ylab="",xlim=Xlim+xd*c(-.0,.01),ylim=Ylim+yd*c(-.01,.01))
polygon(Te)
points(dat,pch=".")
text(dat,labels = factor(dec.dist.rank) )

###
inc.dist<-rank.d2e.Te(dat,dec = FALSE)
inc.dist
inc.dist.rank<-inc.dist[[2]] #the rank of distances to the edges in increasing order
inc.dist.rank
dist<-inc.dist[[1]] #distances to the edges of the std eq. triangle
dist

plot(A,pch=".",xlab="",ylab="",xlim=Xlim,ylim=Ylim)
polygon(Te)
points(dat,pch=".",xlab="",ylab="", main="",xlim=Xlim+xd*c(-.05,.05),ylim=Ylim+yd*c(-.05,.05))
text(dat,labels = factor(inc.dist.rank) )

rank.d2e.Te(rbind(dat,dat))

dat.fr<-data.frame(a=dat)
rank.d2e.Te(dat.fr)

n<-20
#set.seed(1)
dat<-runifTe(n)$gen.points
#dat<-cbind(runif(n),runif(n))

dec.dist<-order.d2e.Te(dat)
dec.dist
dec.dist.order<-dec.dist[[2]] #the order of distances to the edges in decreasing order
dec.dist.order
dist<-dec.dist[[1]] #distances to the edges of the std eq. triangle
dist
dist[dec.dist.order] #distances in decreasing order
dat[dec.dist.order,] #data in decreasing order

A<-c(0,0); B<-c(1,0); C<-c(.5,sqrt(3.)/2);
Te<-rbind(A,B,C);

Xlim<-range(Te[,1])
Ylim<-range(Te[,2])
xd<-Xlim[2]-Xlim[1]
yd<-Ylim[2]-Ylim[1]

plot(A,pch=".",xlab="",ylab="",xlim=Xlim+xd*c(-.01,.01),ylim=Ylim+yd*c(-.01,.01))
polygon(Te)
points(dat,pch=".")
text(dat[dec.dist.order,],labels = factor(1:n) )

###
inc.dist<-order.d2e.Te(dat,dec = FALSE)
inc.dist
inc.dist.order<-inc.dist[[2]] #the order of distances to the edges in increasing order
inc.dist.order
dist<-inc.dist[[1]] #distances to the edges of the std eq. triangle
dist
dist[inc.dist.order] #distances in increasing order

plot(A,pch=".",xlab="",ylab="",xlim=Xlim+xd*c(-.05,.05),ylim=Ylim+yd*c(-.05,.05))
polygon(Te)
points(dat,pch=".")
text(dat[inc.dist.order,],labels = factor(1:n) )

order.d2e.Te(rbind(dat,dat))

dat.fr<-data.frame(a=dat)
order.d2e.Te(dat.fr)

}
