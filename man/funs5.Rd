% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCDFunctions.r
\name{funs5}
\alias{funs5}
\alias{ind.Del.tri}
\alias{indices.Del.tri}
\title{Two functions: ind.Del.tri and indices.Del.tri

Indices of the Delaunay triangles where the points reside}
\usage{
ind.Del.tri(pt, Yp, DTmesh = NULL)

indices.Del.tri(dat, Yp, DTmesh = NULL)
}
\arguments{
\item{pt}{A 2D point; the index of the Delaunay triangle in which pt resides is to be
determined. It is an argument for ind.Del.tri}

\item{Yp}{A set of 2D points from which Delaunay triangulation is constructed}

\item{DTmesh}{Delaunay triangles based on Yp, default is NULL, which is computed via tri.mesh function
in tripack package. triangles function yields a triangulation data structure from the triangulation object
created by tri.mesh.}

\item{dat}{A set of 2D points (for which the indices of Delaunay triangles are to be determined);
an argument for indices.Del.tri, and can be one point as well.}
}
\value{
ind.Del.tri returns the index of the Delaunay triangle in which the given point, pt, resides
and indices.Del.tri returns the vector of indices of the Delaunay triangles in which points in the data
set, dat, reside

x*y (prod1) or x+y (sum1).
}
\description{
ind.Del.tri finds the index of the Delaunay triangle in which the given point, pt, resides.
indices.Del.tri finds the indices of triangles for all the points in data set, dat, as a vector.
Delaunay triangulation is based on Yp and DTmesh are the Delaunay triangles with default NULL.
The function returns NA for a point not inside the convex hull of Yp.
Number of Y points (i.e., size of Yp) should be at least three and the points
should be in general position so that Delaunay triangulation is (uniquely) defined.
See (\insertCite{okabe:2000,ceyhan:comp-geo-2010,renka:1996;textual}{pcds}) for more on Delaunay triangulation and the tripack algorithm.
}
\examples{
nx<-1000 #number of X points (target)
ny<-10 #number of Y points (nontarget)
#set.seed(1)
Yp<-cbind(runif(ny,0,10),runif(ny,0,10))

Xdt<-runifMT(nx,Yp) #data under CSR in the convex hull of Ypoints
Xdt
summary(Xdt)
plot(Xdt)

dat<-runifMT(nx,Yp)$g #data under CSR in the convex hull of Ypoints
#or use
DTY<-tri.mesh(Yp[,1],Yp[,2],duplicate="remove") #Delaunay triangulation based on Y points
dat<-runifMT(nx,Yp,DTY)$g #data under CSR in the convex hull of Ypoints

Xlim<-range(Yp[,1])
Ylim<-range(Yp[,2])
xd<-Xlim[2]-Xlim[1]
yd<-Ylim[2]-Ylim[1]

#plot of the data in the convex hull of Y points together with the Delaunay triangulation
plot(dat,main=" ", xlab=" ", ylab=" ",xlim=Xlim+xd*c(-.05,.05),ylim=Ylim+yd*c(-.05,.05),type="n")
plot.tri(DTY, add=TRUE, do.points=T,pch=16,col="blue")
points(dat,pch=".",cex=3)

Yp<-rbind(c(.3,.2),c(.4,.5),c(.14,.15))
runifMT(nx,Yp)

dat.fr<-data.frame(a=Yp)
runifMT(nx,dat.fr)

nx<-100 #number of X points (target)
ny<-10 #number of Y points (nontarget)

Yp<-cbind(runif(ny),runif(ny))

dat<-runifMT(nx,Yp)$g #data under CSR in the convex hull of Ypoints
#dat<-cbind(runif(nx),runif(nx))
ind.Del.tri(dat[10,],Yp)

#or use
DTY<-tri.mesh(Yp[,1],Yp[,2],duplicate="remove") #Delaunay triangulation
TRY<-triangles(DTY)[,1:3];
ind.Del.tri(dat[10,],Yp,DTY)

ind.Del.tri(c(.5,.5),Yp)

ind.Del.tri(c(1.5,.5),Yp)

ind.DT<-vector()
for (i in 1:nx)
  ind.DT<-c(ind.DT,ind.Del.tri(dat[i,],Yp))
ind.DT

Xlim<-range(Yp[,1],dat[,1])
Ylim<-range(Yp[,2],dat[,2])
xd<-Xlim[2]-Xlim[1]
yd<-Ylim[2]-Ylim[1]

DTY<-tri.mesh(Yp[,1],Yp[,2],duplicate="remove") #Delaunay triangulation based on Y points

#plot of the data in the convex hull of Y points together with the Delaunay triangulation

plot(dat,main=" ", xlab=" ", ylab=" ",xlim=Xlim+xd*c(-.05,.05),ylim=Ylim+yd*c(-.05,.05),type="n")
plot.tri(DTY, add=TRUE, do.points=T,pch=16,col="blue")
points(dat,pch=".",cex=3)
text(dat,labels = factor(ind.DT) )

Yp<-rbind(c(.3,.2),c(.4,.5),c(.14,.15))
ind.Del.tri(c(.25,.25),Yp)

dat.fr<-data.frame(a=Yp)
ind.Del.tri(c(.25,.25),dat.fr)

}
\references{
\insertAllCited{}

\insertAllCited{}
}
