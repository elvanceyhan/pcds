% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCDFunctions.r
\name{cl2CC.VR}
\alias{cl2CC.VR}
\title{An object of class "Extrema"

The closest points to circumcenter in each CC-vertex region in a triangle}
\usage{
cl2CC.VR(Dt, tri, ch.all.intri = FALSE)
}
\arguments{
\item{Dt}{A set of 2D points representing the set of data points}

\item{tri}{Three 2D points, stacked row-wise, each row representing a vertex of the triangle}

\item{ch.all.intri}{A logical argument (default=FALSE) to check whether all data points are inside
the triangle tri. So if it is TRUE,
the function checks if all data points are inside the closure of the triangle (i.e. interior and boundary
combined) else it does not.}
}
\value{
A list with the elements
\item{txt1}{Vertex labels are A=1, B=2, and C=3 (corresponds to row number in Extrema Points).}
\item{txt2}{A short description of the distances as "Distances to CC ..."}
\item{type}{Type of the extrema points}
\item{mtxt}{The "main" title for the plot of the exrema}
\item{Ext}{The extrema points, here, closest points to CC in each CC-vertex region}
\item{X}{The input data, Dt, can be a matrix or data frame}
\item{num.points}{The number of data points, i.e., size of Dt}
\item{supp}{Support of the data points, here, it is tri}
\item{cent}{The center point used for construction of vertex regions}
\item{ncent}{Name of the center, cent, it is "CC" for this function}
\item{regions}{Vertex regions inside the triangle, tri, provided as a list}
\item{region.names}{Names of the vertex regions as "vr=1","vr=2","vr=3"}
\item{region.centers}{Centers of mass of the vertex regions inside tri}
\item{dist2ref}{Distances from closest points in each CC-vertex region to CC.}
}
\description{
Returns the closest data points among the data set, Dt, to circumcenter, CC, in each CC-vertex region
in the triangle tri=T(A,B,C)=(vertex 1,vertex 2,vertex 3).
ch.all.intri is for checking whether all data points are inside tri (default is FALSE).
If some of the data points are not inside tri and ch.all.intri=TRUE, then the function yields
an error message.
If some of the data points are not inside tri and ch.all.intri=FALSE, then the function yields
the closest points to CC among the data points in each CC-vertex region of tri (yields NA if
there are no data points inside tri). See also (\insertCite{ceyhan:Phd-thesis,ceyhan:mcap2012;textual}{pcds}).
}
\examples{
c1<-.4; c2<-.6;
A<-c(0,0); B<-c(1,0); C<-c(c1,c2);
Tb<-rbind(A,B,C)
n<-20

#set.seed(1)
dat<-runif.bastri(n,c1,c2)$g
#dat<-cbind(runif(n),runif(n))
#dat<-cbind(runif(n,1,2),runif(n,0,1))

Ext<-cl2CC.TbVR(dat,c1,c2)
Ext
summary(Ext)
plot(Ext)

cl2CC.TbVR(dat[1,],c1,c2)

dat2<-rbind(dat,c(.2,.4))
cl2CC.TbVR(dat2,c1,c2)
cl2CC.TbVR(dat2,c1,c2,ch.all.intri = TRUE)

c2CC<-cl2CC.TbVR(dat,c1,c2)

CC<-circ.cent.bastri(c1,c2) #the circumcenter
D1<-(B+C)/2; D2<-(A+C)/2; D3<-(A+B)/2;
Ds<-rbind(D1,D2,D3)

Xlim<-range(Tb[,1],dat[,1])
Ylim<-range(Tb[,2],dat[,2])
xd<-Xlim[2]-Xlim[1]
yd<-Ylim[2]-Ylim[1]

plot(A,pch=".",asp=1,xlab="",ylab="",xlim=Xlim+xd*c(-.05,.05),ylim=Ylim+yd*c(-.05,.05))
polygon(Tb)
L<-matrix(rep(CC,3),ncol=3,byrow=T); R<-Ds
segments(L[,1], L[,2], R[,1], R[,2], lty=2)
points(dat)
points(c2CC$Ext,pch=4,col=2)

txt<-rbind(Tb,CC,Ds)
xc<-txt[,1]+c(-.03,.03,.02,.07,.06,-.05,.01)
yc<-txt[,2]+c(.02,.02,.03,-.01,.03,.03,-.04)
txt.str<-c("A","B","C","CC","D1","D2","D3")
text(xc,yc,txt.str)

cl2CC.TbVR(dat,c1,c2)

cl2CC.TbVR(c(.4,.2),c1,c2)

dat.fr<-data.frame(a=dat)
cl2CC.TbVR(dat.fr,c1,c2)

}
\references{
\insertAllCited{}
}
\seealso{
\code{\link{cl2CC.TbVR}}, \code{\link{cl2eTbVRcent}}, \code{\link{cl2eVRcent}},
\code{\link{cl2eVRCM}} and  \code{\link{fr2eTeER}}
}
